/* Query 1 - query used for fisrt insight */
/* Q1: When does top customers paid most amount? */
/*-----------------------------------------*/

WITH top_customers AS (
    SELECT  DISTINCT c.first_name || ' ' || c.last_name AS full_name,
            SUM(p.amount) OVER ( PARTITION BY (c.first_name || c.last_name))
      FROM  customer c
      JOIN  payment p
        ON  c.customer_id = p.customer_id
  ORDER BY  2 DESC
     LIMIT  10),

payment_details AS (
    SELECT  c.first_name || ' ' || c.last_name AS full_name,
            DATE_TRUNC('month', p.payment_date) AS pay_month,
            DATE_PART('year', p.payment_date) AS pay_year,
            p.amount
      FROM  customer c
      JOIN  payment p
        ON  c.customer_id = p.customer_id)

  SELECT  pd.pay_month,
          tc.full_name,
          COUNT(pd.amount) AS pay_count_per_month,
          SUM(pd.amount) AS pay_amount_per_month
    FROM  top_customers tc
    JOIN  payment_details pd
      ON  tc.full_name = pd.full_name
   WHERE  pd.pay_year = 2007
GROUP BY  1, 2
ORDER BY  2, 1;

/*-----------------------------------------*/
/* Query 2 - query used for second insight */
/* Q2: Where should the customer accquisition funds should be spent to increase the rentals? */
/*-----------------------------------------*/

WITH countries AS (
    SELECT r.rental_id,
           cu.customer_id,
           a.district,
           ci.city,
           co.country
      FROM rental r
      JOIN customer cu
        ON r.customer_id = cu.customer_id
      JOIN address a
        ON cu.address_id = a.address_id
      JOIN city ci
        ON a.city_id = ci.city_id
      JOIN country co
        ON ci.country_id = co.country_id
  ORDER BY 5, 4, 3, 2, 1)

  SELECT DISTINCT country,
         COUNT(country) OVER (PARTITION BY country) AS rentals
    FROM countries
ORDER BY 2 DESC;

/*-----------------------------------------*/
/* Query 3 - query used for third insight */
/* Q3: Which films generate most income based on ratings? */
/*-----------------------------------------*/

WITH categories AS (
    SELECT r.rental_id,
           f.title,
           f.rating,
           p.amount
      FROM film f
      JOIN inventory i
        ON f.film_id = i.film_id
      JOIN rental r
        ON i.inventory_id = r.inventory_id
      JOIN payment p
        ON r.rental_id = p.rental_id
  ORDER BY 3, 2, 1)

  SELECT DISTINCT rating,
         COUNT(rating) OVER partitioned_window AS rentals,
         SUM(amount) OVER partitioned_window AS gross_amount
    FROM categories
  WINDOW partitioned_window AS ( PARTITION BY rating )
ORDER BY 3 DESC;

/*-----------------------------------------*/
/* Query 4 - query used for fourth insight */
/* Q4: What are the most influencing factors in income generation? */
/*-----------------------------------------*/

WITH segmented_table AS (
    SELECT f.film_id,
           r.rental_id,
           f.title,
           CASE WHEN f.length <= 60 THEN '1 hour or less'
                WHEN f.length > 60 AND f.length <= 120 THEN 'Between 1-2 hours'
                WHEN f.length > 120 AND f.length <= 180 THEN 'Between 2-3 hours'
                WHEN f.length > 180 THEN 'More than 3 hours'
                ELSE 'Undefined' /* To identify anamoly and NULLs*/
                END AS filmlen_groups,
           CASE WHEN c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music') THEN 'family_category'
                ELSE 'other_category'
                END AS film_category,
           p.amount
      FROM film f
      JOIN film_category fc
        ON f.film_id = fc.film_id
      JOIN category c
        ON fc.category_id = c.category_id
      JOIN inventory i
        ON f.film_id = i.film_id
      JOIN rental r
        ON i.inventory_id = r.inventory_id
      JOIN payment p
        ON r.rental_id = p.rental_id
  ORDER BY 5, 4, 3)

  SELECT film_category,
         filmlen_groups,
         COUNT(*) AS rental_count,
         SUM(amount) AS income_generated
    FROM segmented_table
GROUP BY 1, 2
ORDER BY 4 DESC, 3 DESC;

/*-----------------------------------------*/
/* Query 5 - query used for fifth insight */
/* Q5: What influences the income generated by any actor? */
/*-----------------------------------------*/

WITH actors AS (
  SELECT a.first_name || ' ' || a.last_name AS actor,
         p.amount
    FROM actor a
    JOIN film_actor fa
      ON a.actor_id = fa.actor_id
    JOIN film f
      ON fa.film_id = f.film_id
    JOIN inventory i
      ON f.film_id = i.film_id
    JOIN rental r
      ON i.inventory_id = r.inventory_id
    JOIN payment p
      ON r.rental_id = p.rental_id)

  SELECT DISTINCT actor,
         COUNT(actor) OVER partitioned_window AS rental_count,
         SUM(amount) OVER partitioned_window AS income_generated
    FROM actors
  WINDOW partitioned_window AS (PARTITION BY actor)
ORDER BY 3 DESC, 2 DESC, 1;

/*-----------------------------------------*/
/* Query 6 - query used for sixth insight */
/* Q6: Who are the actors that generate most income? */
/*-----------------------------------------*/

WITH actors AS (
  SELECT a.first_name || ' ' || a.last_name AS actor,
         p.amount
    FROM actor a
    JOIN film_actor fa
      ON a.actor_id = fa.actor_id
    JOIN film f
      ON fa.film_id = f.film_id
    JOIN inventory i
      ON f.film_id = i.film_id
    JOIN rental r
      ON i.inventory_id = r.inventory_id
    JOIN payment p
      ON r.rental_id = p.rental_id)

  SELECT DISTINCT actor,
         COUNT(actor) OVER partitioned_window AS rental_count,
         SUM(amount) OVER partitioned_window AS income_generated
    FROM actors
  WINDOW partitioned_window AS (PARTITION BY actor)
ORDER BY 3 DESC, 2 DESC, 1
   LIMIT 10;

/*-----------------------------------------*/
/* Query 7 - query used for seventh insight */
/* Q7: Are there any overdues from the existing customers? */
/*-----------------------------------------*/

WITH no_return AS (
  SELECT r.rental_id,
         r.inventory_id,
         r.customer_id,
         r.rental_date,
         r.return_date
    FROM rental r
   WHERE r.return_date IS NULL)

  SELECT nr.rental_id,
         c.first_name || ' ' || c.last_name AS customer_name,
         a.phone,
         c.email,
         f.title AS movie,
         nr.rental_date,
         nr.return_date,
         CURRENT_TIMESTAMP - nr.rental_date AS overdue
    FROM no_return nr
    JOIN inventory i
      ON nr.inventory_id = i.inventory_id
    JOIN film f
      ON i.film_id = f.film_id
    JOIN customer c
      ON nr.customer_id = c.customer_id
    JOIN address a
      ON c.address_id = a.address_id
   WHERE nr.rental_date + f.rental_duration * INTERVAL '1 DAY' < CURRENT_TIMESTAMP
ORDER BY CURRENT_TIMESTAMP - nr.rental_date DESC;

/*-----------------------------------------*/
/* Query 8 - query used for eighth insight */
/* Q8: When does the family films rented most based on the day of the week? */
/*-----------------------------------------*/

WITH rental_day AS (
  SELECT r.rental_id,
         f.title,
         c.name AS category,
         r.rental_date,
         CASE WHEN EXTRACT(DOW FROM r.rental_date) = 0 THEN 'sunday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 1 THEN 'monday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 2 THEN 'tuesday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 3 THEN 'wednesday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 4 THEN 'thursday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 5 THEN 'friday'
              WHEN EXTRACT(DOW FROM r.rental_date) = 6 THEN 'saturday'
              ELSE 'undefined' /* TO identify NULLs and anomaly*/
              END AS dow
    FROM rental r
    JOIN inventory i
      ON r.inventory_id = i.inventory_id
    JOIN film f
      ON i.film_id = f.film_id
    JOIN film_category fc
      ON f.film_id = fc.film_id
    JOIN category c
      ON fc.category_id = c.category_id
     AND c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
   )

  SELECT DISTINCT rd.dow,
         COUNT(rd.rental_id) OVER (PARTITION BY rd.dow) AS rental_count
    FROM rental_day rd
ORDER BY 2 DESC;